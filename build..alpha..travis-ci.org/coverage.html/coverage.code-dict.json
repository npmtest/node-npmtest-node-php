{"/home/travis/build/npmtest/node-npmtest-node-php/test.js":"/* istanbul instrument in package npmtest_node_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-php/lib.npmtest_node_php.js":"/* istanbul instrument in package npmtest_node_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_php = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_php = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-php/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-php && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_php\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_php.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_php.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_php.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_php.__dirname + '/lib.npmtest_node_php.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-php/node_modules/node-php/main.js":"var url = require(\"url\"); \nvar child = require(\"child_process\"); \nvar path = require(\"path\"); \nvar fs = require(\"fs\"); \n\nfunction runPHP(req, response, next, phpdir){\n\tvar parts = url.parse(req.url);\n\tvar query = parts.query;\n\t\n\tvar file = path.join(phpdir, parts.pathname); \n\t\n\tif(!fs.existsSync(file)){\n\t\tfile = path.join(phpdir, \"index.php\"); \n\t} else if(fs.statSync(file).isDirectory()){\n\t\tfile = path.join(file, \"index.php\"); \n\t}\n\t\n\tvar pathinfo = \"\"; \n\tvar i = req.url.indexOf(\".php\"); \n\tif(i > 0) pathinfo = parts.pathname.substring(i+4); \n\telse pathinfo = parts.pathname; \n\t\n\tvar env = {\n\t\tSERVER_SIGNATURE: \"NodeJS server at localhost\", \n\t\tPATH_INFO: pathinfo, //The extra path information, as given in the requested URL. In fact, scripts can be accessed by their virtual path, followed by extra information at the end of this path. The extra information is sent in PATH_INFO.\n    PATH_TRANSLATED: \"\", //The virtual-to-real mapped version of PATH_INFO.\n    SCRIPT_NAME: parts.pathname, //The virtual path of the script being executed.\n    SCRIPT_FILENAME: file, \n    REQUEST_FILENAME: file, //The real path of the script being executed.\n    SCRIPT_URI: req.url, //The full URL to the current object requested by the client.\n    URL: req.url, //The full URI of the current request. It is made of the concatenation of SCRIPT_NAME and PATH_INFO (if available.)\n    SCRIPT_URL: req.url, \n    REQUEST_URI: req.url, //The original request URI sent by the client.\n    REQUEST_METHOD: req.method, //The method used by the current request; usually set to GET or POST.\n    QUERY_STRING: parts.query||\"\", //The information which follows the ? character in the requested URL.\n    CONTENT_TYPE: req.get(\"Content-type\")||\"\", //\"multipart/form-data\", //\"application/x-www-form-urlencoded\", //The MIME type of the request body; set only for POST or PUT requests.\n    CONTENT_LENGTH: req.rawBody.length||0, //The length in bytes of the request body; set only for POST or PUT requests.\n    AUTH_TYPE: \"\", //The authentication type if the client has authenticated itself to access the script.\n    AUTH_USER: \"\", \n    REMOTE_USER: \"\", //The name of the user as issued by the client when authenticating itself to access the script.\n    ALL_HTTP: Object.keys(req.headers).map(function(x){return \"HTTP_\"+x.toUpperCase().replace(\"-\", \"_\")+\": \"+req.headers[x];}).reduce(function(a, b){return a+b+\"\\n\";}, \"\"), //All HTTP headers sent by the client. Headers are separated by carriage return characters (ASCII 13 - \\n) and each header name is prefixed by HTTP_, transformed to upper cases, and - characters it contains are replaced by _ characters.\n    ALL_RAW: Object.keys(req.headers).map(function(x){return x+\": \"+req.headers[x];}).reduce(function(a, b){return a+b+\"\\n\";}, \"\"), //All HTTP headers as sent by the client in raw form. No transformation on the header names is applied.\n    SERVER_SOFTWARE: \"NodeJS\", //The web server's software identity.\n    SERVER_NAME: \"localhost\", //The host name or the IP address of the computer running the web server as given in the requested URL.\n    SERVER_ADDR: \"127.0.0.1\", //The IP address of the computer running the web server.\n    SERVER_PORT: 8011, //The port to which the request was sent.\n    GATEWAY_INTERFACE: \"CGI/1.1\", //The CGI Specification version supported by the web server; always set to CGI/1.1.\n    SERVER_PROTOCOL: \"\", //The HTTP protocol version used by the current request.\n    REMOTE_ADDR: \"\", //The IP address of the computer that sent the request.\n    REMOTE_PORT: \"\", //The port from which the request was sent.\n    DOCUMENT_ROOT: \"\", //The absolute path of the web site files. It has the same value as Documents Path.\n    INSTANCE_ID: \"\", //The numerical identifier of the host which served the request. On Abyss Web Server X1, it is always set to 1 since there is only a single host.\n    APPL_MD_PATH: \"\", //The virtual path of the deepest alias which contains the request URI. If no alias contains the request URI, the variable is set to /.\n    APPL_PHYSICAL_PATH: \"\", //The real path of the deepest alias which contains the request URI. If no alias contains the request URI, the variable is set to the same value as DOCUMENT_ROOT.\n    IS_SUBREQ: \"\", //It is set to true if the current request is a subrequest, i.e. a request not directly invoked by a client. Otherwise, it is set to true. Subrequests are generated by the server for internal processing. XSSI includes for example result in subrequests. \n    REDIRECT_STATUS: 1\n  }; \n  \n  Object.keys(req.headers).map(function(x){return env[\"HTTP_\"+x.toUpperCase().replace(\"-\", \"_\")] = req.headers[x];}); \n  \n\tif(/.*?\\.php$/.test(file)){\n\t\tvar res = \"\", err = \"\"; \n\t\t\n\t\tvar php = child.spawn(\"php-cgi\", [], {\n\t\t\tenv: env\n\t\t}); \n\t\t\n\t\t//php.stdin.resume(); \n\t\t//console.log(req.rawBody); \n\t\t//(new Stream(req.rawBody)).pipe(php.stdin); \n\t\t/*.on(\"error\", function(){}); */\n\t\tphp.stdin.write(req.rawBody); \n\t\t//php.stdin.write(\"\\n\"); \n\t\t\n\t\t//php.stdin.end(); \n\t\t\n\t\tphp.stdout.on(\"data\", function(data){\n\t\t\t//console.log(data.toString()); \n\t\t\tres += data.toString(); \n\t\t}); \n\t\tphp.stderr.on(\"data\", function(data){\n\t\t\terr += err.toString(); \n\t\t}); \n\t\tphp.on(\"error\", function(err){\n\t\t\tconsole.error(err); \n\t\t}); \n\t\tphp.on(\"exit\", function(){\n\t\t\t// extract headers \n\t\t\tphp.stdin.end(); \n\t\t\t \n\t\t\tvar lines = res.split(\"\\r\\n\"); \n\t\t\tvar line = 0; \n\t\t\tvar html = \"\"; \n\t\t\tif(lines.length){\n\t\t\t\tdo {\n\t\t\t\t\tvar m = lines[line].split(\": \"); \n\t\t\t\t\tif(m[0] === \"\") break; \n\t\t\t\t\t\n\t\t\t\t\t//console.log(\"HEADER: \"+m[0]+\": \"+m[1]); \n\t\t\t\t\tif(m[0] == \"Status\"){\n\t\t\t\t\t\tresponse.statusCode = parseInt(m[1]); \n\t\t\t\t\t}\n\t\t\t\t\tif(m.length == 2){\n\t\t\t\t\t\tresponse.setHeader(m[0], m[1]); \n\t\t\t\t\t}\n\t\t\t\t\tline++; \n\t\t\t\t} while(lines[line] !== \"\"); \n\t\t\t\t\n\t\t\t\thtml = lines.splice(line+1).join(\"\\n\"); \n\t\t\t} else {\n\t\t\t\thtml = res; \n\t\t\t}\n\t\t\t//console.log(\"STATUS: \"+response.statusCode); \n\t\t\t//console.log(html); \n\t\t\tresponse.send(html, response.statusCode); \n\t\t\tresponse.end(); \n\t\t}); \n\t\t\n\t} else {\n\t\tresponse.sendfile(file);\n\t\t//response.end(); \n\t\t//next(); \n\t}\n}\n\nexports.cgi = function(phproot){\n\treturn function(req, res, next){\n    var data = null;\n    \n    //req.setEncoding('utf8');\n    req.on('data', function(chunk) { \n\t\t\t//data.write(chunk.toString('binary'), data.length, chunk.length, 'binary');\n\t\t\t//console.log(chunk); \n\t\t\tif(!data) data = chunk; \n\t\t\telse data = data+chunk; \n\t\t\t//data = data.concat(chunk); \n    });\n    req.on('end', function() {\n\t\t\treq.rawBody = data||\"\";\n\t\t\t//console.log(req.rawBody); \n\t\t\t//console.log(\"ENCODING: \"+req.get(\"Content-type\")+\", len: \"+req.rawBody.length); \n\t\t\trunPHP(req, res, next, phproot);\n    });\n\t}\n}\n\n"}